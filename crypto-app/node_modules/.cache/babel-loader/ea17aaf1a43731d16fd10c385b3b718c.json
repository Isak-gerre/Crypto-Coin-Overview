{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\n\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\n\nvar __export = (target, all) => {\n  __markAsModule(target);\n\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2)) if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n      get: () => module2[key],\n      enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n    });\n  }\n\n  return target;\n};\n\nvar __toModule = module2 => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n    get: () => module2.default,\n    enumerable: true\n  } : {\n    value: module2,\n    enumerable: true\n  })), module2);\n};\n\n__export(exports, {\n  default: () => src_default\n});\n\nvar import_cross_fetch = __toModule(require(\"cross-fetch\"));\n\nvar import_javascript_stringify = __toModule(require(\"javascript-stringify\"));\n\nconst SPECIAL_FUNCTION_REGEX = /['\"]__BEGINFUNCTION__(.*?)__ENDFUNCTION__['\"]/g;\n\nfunction doStringify(chartConfig) {\n  const str = (0, import_javascript_stringify.stringify)(chartConfig);\n\n  if (!str) {\n    return void 0;\n  }\n\n  return str.replace(SPECIAL_FUNCTION_REGEX, \"$1\");\n}\n\nfunction postJson(url, payload) {\n  return (0, import_cross_fetch.default)(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n}\n\nclass QuickChart {\n  constructor(apiKey, accountId) {\n    this.apiKey = apiKey;\n    this.accountId = accountId;\n    this.host = \"quickchart.io\";\n    this.scheme = \"https\";\n    this.baseUrl = `${this.scheme}://${this.host}`;\n    this.chart = void 0;\n    this.width = 500;\n    this.height = 300;\n    this.devicePixelRatio = 1;\n    this.backgroundColor = \"#ffffff\";\n    this.format = \"png\";\n    this.version = \"2.9.4\";\n  }\n\n  setConfig(chartConfig) {\n    this.chart = typeof chartConfig === \"string\" ? chartConfig : doStringify(chartConfig);\n    return this;\n  }\n\n  setWidth(width) {\n    this.width = width;\n    return this;\n  }\n\n  setHeight(height) {\n    this.height = height;\n    return this;\n  }\n\n  setBackgroundColor(color) {\n    this.backgroundColor = color;\n    return this;\n  }\n\n  setDevicePixelRatio(ratio) {\n    this.devicePixelRatio = ratio;\n    return this;\n  }\n\n  setFormat(fmt) {\n    this.format = fmt;\n    return this;\n  }\n\n  setVersion(version) {\n    this.version = version;\n    return this;\n  }\n\n  isValid() {\n    if (!this.chart) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getUrlObject() {\n    if (!this.isValid()) {\n      throw new Error(\"You must call setConfig before getUrl\");\n    }\n\n    const ret = new URL(`${this.baseUrl}/chart`);\n    ret.searchParams.append(\"c\", this.chart);\n    ret.searchParams.append(\"w\", String(this.width));\n    ret.searchParams.append(\"h\", String(this.height));\n\n    if (this.devicePixelRatio !== 1) {\n      ret.searchParams.append(\"devicePixelRatio\", String(this.devicePixelRatio));\n    }\n\n    if (this.backgroundColor) {\n      ret.searchParams.append(\"bkg\", this.backgroundColor);\n    }\n\n    if (this.format) {\n      ret.searchParams.append(\"f\", this.format);\n    }\n\n    if (this.version) {\n      ret.searchParams.append(\"v\", this.version);\n    }\n\n    if (this.apiKey) {\n      ret.searchParams.append(\"key\", this.apiKey);\n    }\n\n    return ret;\n  }\n\n  getUrl() {\n    return this.getUrlObject().href;\n  }\n\n  getSignedUrl() {\n    if (!this.accountId || !this.apiKey) {\n      throw new Error(\"You must set accountId and apiKey in the QuickChart constructor to use getSignedUrl()\");\n    }\n\n    const crypto = require(\"crypto\");\n\n    const urlObj = this.getUrlObject();\n    const chartStr = urlObj.searchParams.get(\"c\");\n    const signature = crypto.createHmac(\"sha256\", this.apiKey).update(chartStr).digest(\"hex\");\n    urlObj.searchParams.append(\"sig\", signature);\n    urlObj.searchParams.append(\"accountId\", this.accountId);\n    urlObj.searchParams.delete(\"key\");\n    return urlObj.href;\n  }\n\n  getPostData() {\n    if (!this.isValid()) {\n      throw new Error(\"You must call setConfig creating post data\");\n    }\n\n    const {\n      width,\n      height,\n      chart,\n      format,\n      version,\n      backgroundColor,\n      devicePixelRatio,\n      apiKey\n    } = this;\n    const postData = {\n      width,\n      height,\n      chart\n    };\n\n    if (format) {\n      postData.format = format;\n    }\n\n    if (version) {\n      postData.version = version;\n    }\n\n    if (backgroundColor) {\n      postData.backgroundColor = backgroundColor;\n    }\n\n    if (devicePixelRatio) {\n      postData.devicePixelRatio = devicePixelRatio;\n    }\n\n    if (apiKey) {\n      postData.key = apiKey;\n    }\n\n    return postData;\n  }\n\n  async getShortUrl() {\n    if (!this.isValid()) {\n      throw new Error(\"You must call setConfig before getUrl\");\n    }\n\n    if (this.host !== \"quickchart.io\") {\n      throw new Error(\"Short URLs must use quickchart.io host\");\n    }\n\n    const resp = await postJson(`${this.baseUrl}/chart/create`, this.getPostData());\n\n    if (!resp.ok) {\n      const quickchartError = resp.headers.get(\"x-quickchart-error\");\n      const details = quickchartError ? `\n${quickchartError}` : \"\";\n      throw new Error(`Chart shorturl creation failed with status code ${resp.status}${details}`);\n    }\n\n    const json = await resp.json();\n\n    if (!json || !json.success || !json.url) {\n      throw new Error(\"Received failure response from chart shorturl endpoint\");\n    } else {\n      return json.url;\n    }\n  }\n\n  async toBinary() {\n    if (!this.isValid()) {\n      throw new Error(\"You must call setConfig before getUrl\");\n    }\n\n    const resp = await postJson(`${this.baseUrl}/chart`, this.getPostData());\n\n    if (!resp.ok) {\n      const quickchartError = resp.headers.get(\"x-quickchart-error\");\n      const details = quickchartError ? `\n${quickchartError}` : \"\";\n      throw new Error(`Chart creation failed with status code ${resp.status}${details}`);\n    }\n\n    const data = await resp.arrayBuffer();\n    return Buffer.from(data);\n  }\n\n  async toDataUrl() {\n    const buf = await this.toBinary();\n    const b64buf = buf.toString(\"base64\");\n    const type = this.format === \"svg\" ? \"svg+xml\" : \"png\";\n    return `data:image/${type};base64,${b64buf}`;\n  }\n\n  async toFile(pathOrDescriptor) {\n    const fs = require(\"fs\");\n\n    const buf = await this.toBinary();\n    fs.writeFileSync(pathOrDescriptor, buf);\n  }\n\n  static getGradientFillHelper(direction, colors, dimensions) {\n    return `__BEGINFUNCTION__getGradientFillHelper(${JSON.stringify(direction)}, ${JSON.stringify(colors)}, ${JSON.stringify(dimensions)})__ENDFUNCTION__`;\n  }\n\n  static getGradientFill(colorOptions, linearGradient) {\n    return `__BEGINFUNCTION__getGradientFill(${JSON.stringify(colorOptions)}, ${JSON.stringify(linearGradient)})__ENDFUNCTION__`;\n  }\n\n  static getImageFill(url) {\n    return `__BEGINFUNCTION__getImageFill(${JSON.stringify(url)})__ENDFUNCTION__`;\n  }\n\n}\n\nQuickChart.pattern = {\n  draw: function (shapeType, backgroundColor, patternColor, requestedSize) {\n    return `__BEGINFUNCTION__pattern.draw(${JSON.stringify(shapeType)}, ${JSON.stringify(backgroundColor)}, ${JSON.stringify(patternColor)}, ${JSON.stringify(requestedSize)})__ENDFUNCTION__`;\n  }\n};\nvar src_default = QuickChart; // Annotate the CommonJS export names for ESM import in node:\n\n0 && (module.exports = {});\nmodule.exports = module.exports.default;","map":{"version":3,"mappings":"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","names":["__export","default","__toModule","SPECIAL_FUNCTION_REGEX","chartConfig","str","replace","url","payload","method","headers","body","JSON","stringify","constructor","apiKey","accountId","host","scheme","baseUrl","chart","width","height","devicePixelRatio","backgroundColor","format","version","setConfig","doStringify","setWidth","setHeight","setBackgroundColor","color","setDevicePixelRatio","ratio","setFormat","fmt","setVersion","isValid","getUrlObject","Error","ret","URL","searchParams","append","String","getUrl","href","getSignedUrl","crypto","require","urlObj","chartStr","get","signature","createHmac","update","digest","delete","getPostData","postData","key","resp","postJson","ok","quickchartError","details","status","json","success","data","arrayBuffer","Buffer","from","buf","toBinary","b64buf","toString","type","pathOrDescriptor","fs","writeFileSync","direction","colors","dimensions","colorOptions","linearGradient","QuickChart","pattern","draw","shapeType","patternColor","requestedSize","src_default"],"sources":["/Users/isakgerre/Documents/GitHub/Crypto-Coin-Overview/crypto-app/node_modules/quickchart-js/src/index.ts"],"sourcesContent":["import fetch from 'cross-fetch';\nimport { stringify } from 'javascript-stringify';\n\nimport type { ChartConfiguration } from 'chart.js';\nimport type { Response } from 'cross-fetch';\n\nconst SPECIAL_FUNCTION_REGEX: RegExp = /['\"]__BEGINFUNCTION__(.*?)__ENDFUNCTION__['\"]/g;\n\ninterface PostData {\n  chart: string;\n  width?: number;\n  height?: number;\n  format?: string;\n  version?: string;\n  backgroundColor?: string;\n  devicePixelRatio?: number;\n  key?: string;\n}\n\ninterface GradientFillOption {\n  offset: number;\n  color: string;\n}\n\ninterface GradientDimensionOption {\n  width?: number;\n  height?: number;\n}\n\nfunction doStringify(chartConfig: ChartConfiguration): string | undefined {\n  const str = stringify(chartConfig);\n  if (!str) {\n    return undefined;\n  }\n  return str.replace(SPECIAL_FUNCTION_REGEX, '$1');\n}\n\nfunction postJson(url: string, payload: PostData): Promise<Response> {\n  return fetch(url, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(payload),\n  });\n}\n\nclass QuickChart {\n  private host: string;\n  private scheme: string;\n  private baseUrl: string;\n  private width: number;\n  private height: number;\n  private devicePixelRatio: number;\n  private backgroundColor: string;\n  private format: string;\n  private version: string;\n\n  private chart?: string;\n  private apiKey?: string;\n  private accountId?: string;\n\n  constructor(apiKey?: string, accountId?: string) {\n    this.apiKey = apiKey;\n    this.accountId = accountId;\n\n    this.host = 'quickchart.io';\n    this.scheme = 'https';\n    this.baseUrl = `${this.scheme}://${this.host}`;\n\n    this.chart = undefined;\n    this.width = 500;\n    this.height = 300;\n    this.devicePixelRatio = 1.0;\n    this.backgroundColor = '#ffffff';\n    this.format = 'png';\n    this.version = '2.9.4';\n  }\n\n  setConfig(chartConfig: string | ChartConfiguration): QuickChart {\n    this.chart = typeof chartConfig === 'string' ? chartConfig : doStringify(chartConfig);\n    return this;\n  }\n\n  setWidth(width: number): QuickChart {\n    this.width = width;\n    return this;\n  }\n\n  setHeight(height: number): QuickChart {\n    this.height = height;\n    return this;\n  }\n\n  setBackgroundColor(color: string): QuickChart {\n    this.backgroundColor = color;\n    return this;\n  }\n\n  setDevicePixelRatio(ratio: number): QuickChart {\n    this.devicePixelRatio = ratio;\n    return this;\n  }\n\n  setFormat(fmt: string): QuickChart {\n    this.format = fmt;\n    return this;\n  }\n\n  setVersion(version: string): QuickChart {\n    this.version = version;\n    return this;\n  }\n\n  isValid(): boolean {\n    if (!this.chart) {\n      return false;\n    }\n    return true;\n  }\n\n  private getUrlObject(): URL {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n    const ret = new URL(`${this.baseUrl}/chart`);\n    ret.searchParams.append('c', this.chart!);\n    ret.searchParams.append('w', String(this.width));\n    ret.searchParams.append('h', String(this.height));\n    if (this.devicePixelRatio !== 1.0) {\n      ret.searchParams.append('devicePixelRatio', String(this.devicePixelRatio));\n    }\n    if (this.backgroundColor) {\n      ret.searchParams.append('bkg', this.backgroundColor);\n    }\n    if (this.format) {\n      ret.searchParams.append('f', this.format);\n    }\n    if (this.version) {\n      ret.searchParams.append('v', this.version);\n    }\n    if (this.apiKey) {\n      ret.searchParams.append('key', this.apiKey);\n    }\n    return ret;\n  }\n\n  getUrl(): string {\n    return this.getUrlObject().href;\n  }\n\n  getSignedUrl(): string {\n    if (!this.accountId || !this.apiKey) {\n      throw new Error(\n        'You must set accountId and apiKey in the QuickChart constructor to use getSignedUrl()',\n      );\n    }\n    const crypto = require('crypto');\n    const urlObj = this.getUrlObject();\n    const chartStr = urlObj.searchParams.get('c');\n\n    const signature = crypto.createHmac('sha256', this.apiKey).update(chartStr).digest('hex');\n    urlObj.searchParams.append('sig', signature);\n    urlObj.searchParams.append('accountId', this.accountId);\n    urlObj.searchParams.delete('key');\n    return urlObj.href;\n  }\n\n  getPostData(): PostData {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig creating post data');\n    }\n\n    const { width, height, chart, format, version, backgroundColor, devicePixelRatio, apiKey } =\n      this;\n    const postData: PostData = {\n      width,\n      height,\n      chart: chart!,\n    };\n    if (format) {\n      postData.format = format;\n    }\n    if (version) {\n      postData.version = version;\n    }\n    if (backgroundColor) {\n      postData.backgroundColor = backgroundColor;\n    }\n    if (devicePixelRatio) {\n      postData.devicePixelRatio = devicePixelRatio;\n    }\n    if (apiKey) {\n      postData.key = apiKey;\n    }\n    return postData;\n  }\n\n  async getShortUrl(): Promise<string> {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n    if (this.host !== 'quickchart.io') {\n      throw new Error('Short URLs must use quickchart.io host');\n    }\n\n    const resp = await postJson(`${this.baseUrl}/chart/create`, this.getPostData());\n    if (!resp.ok) {\n      const quickchartError = resp.headers.get('x-quickchart-error');\n      const details = quickchartError ? `\\n${quickchartError}` : '';\n      throw new Error(`Chart shorturl creation failed with status code ${resp.status}${details}`);\n    }\n\n    const json = (await resp.json()) as undefined | { success?: boolean; url?: string };\n    if (!json || !json.success || !json.url) {\n      throw new Error('Received failure response from chart shorturl endpoint');\n    } else {\n      return json.url;\n    }\n  }\n\n  async toBinary(): Promise<Buffer> {\n    if (!this.isValid()) {\n      throw new Error('You must call setConfig before getUrl');\n    }\n\n    const resp = await postJson(`${this.baseUrl}/chart`, this.getPostData());\n    if (!resp.ok) {\n      const quickchartError = resp.headers.get('x-quickchart-error');\n      const details = quickchartError ? `\\n${quickchartError}` : '';\n      throw new Error(`Chart creation failed with status code ${resp.status}${details}`);\n    }\n    const data = await resp.arrayBuffer();\n    return Buffer.from(data);\n  }\n\n  async toDataUrl(): Promise<string> {\n    const buf = await this.toBinary();\n    const b64buf = buf.toString('base64');\n    const type = this.format === 'svg' ? 'svg+xml' : 'png';\n    return `data:image/${type};base64,${b64buf}`;\n  }\n\n  async toFile(pathOrDescriptor: string): Promise<void> {\n    const fs = require('fs');\n    const buf = await this.toBinary();\n    fs.writeFileSync(pathOrDescriptor, buf);\n  }\n\n  static getGradientFillHelper(\n    direction: string,\n    colors: string[],\n    dimensions?: GradientDimensionOption,\n  ): string {\n    return `__BEGINFUNCTION__getGradientFillHelper(${JSON.stringify(direction)}, ${JSON.stringify(\n      colors,\n    )}, ${JSON.stringify(dimensions)})__ENDFUNCTION__`;\n  }\n\n  static getGradientFill(\n    colorOptions: GradientFillOption[],\n    linearGradient: [number, number, number, number],\n  ): string {\n    return `__BEGINFUNCTION__getGradientFill(${JSON.stringify(colorOptions)}, ${JSON.stringify(\n      linearGradient,\n    )})__ENDFUNCTION__`;\n  }\n\n  static getImageFill(url: string): string {\n    return `__BEGINFUNCTION__getImageFill(${JSON.stringify(url)})__ENDFUNCTION__`;\n  }\n\n  static pattern = {\n    draw: function (\n      shapeType: string,\n      backgroundColor: string,\n      patternColor: string,\n      requestedSize: number,\n    ): string {\n      return `__BEGINFUNCTION__pattern.draw(${JSON.stringify(shapeType)}, ${JSON.stringify(\n        backgroundColor,\n      )}, ${JSON.stringify(patternColor)}, ${JSON.stringify(requestedSize)})__ENDFUNCTION__`;\n    },\n  };\n}\n\nexport default QuickChart;\n"]},"metadata":{},"sourceType":"script"}