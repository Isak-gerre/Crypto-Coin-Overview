{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.objectToString = void 0;\n\nconst quote_1 = require(\"./quote\");\n\nconst function_1 = require(\"./function\");\n\nconst array_1 = require(\"./array\");\n/**\n * Transform an object into a string.\n */\n\n\nconst objectToString = (value, space, next, key) => {\n  // Support buffer in all environments.\n  if (typeof Buffer === \"function\" && Buffer.isBuffer(value)) {\n    return `Buffer.from(${next(value.toString(\"base64\"))}, 'base64')`;\n  } // Support `global` under test environments that don't print `[object global]`.\n\n\n  if (typeof global === \"object\" && value === global) {\n    return globalToString(value, space, next, key);\n  } // Use the internal object string to select stringify method.\n\n\n  const toString = OBJECT_TYPES[Object.prototype.toString.call(value)];\n  return toString ? toString(value, space, next, key) : undefined;\n};\n\nexports.objectToString = objectToString;\n/**\n * Stringify an object of keys and values.\n */\n\nconst rawObjectToString = (obj, indent, next, key) => {\n  const eol = indent ? \"\\n\" : \"\";\n  const space = indent ? \" \" : \"\"; // Iterate over object keys and concat string together.\n\n  const values = Object.keys(obj).reduce(function (values, key) {\n    const fn = obj[key];\n    const result = next(fn, key); // Omit `undefined` object entries.\n\n    if (result === undefined) return values; // String format the value data.\n\n    const value = result.split(\"\\n\").join(`\\n${indent}`); // Skip `key` prefix for function parser.\n\n    if (function_1.USED_METHOD_KEY.has(fn)) {\n      values.push(`${indent}${value}`);\n      return values;\n    }\n\n    values.push(`${indent}${quote_1.quoteKey(key, next)}:${space}${value}`);\n    return values;\n  }, []).join(`,${eol}`); // Avoid new lines in an empty object.\n\n  if (values === \"\") return \"{}\";\n  return `{${eol}${values}${eol}}`;\n};\n/**\n * Stringify global variable access.\n */\n\n\nconst globalToString = (value, space, next) => {\n  return `Function(${next(\"return this\")})()`;\n};\n/**\n * Convert JavaScript objects into strings.\n */\n\n\nconst OBJECT_TYPES = {\n  \"[object Array]\": array_1.arrayToString,\n  \"[object Object]\": rawObjectToString,\n  \"[object Error]\": (error, space, next) => {\n    return `new Error(${next(error.message)})`;\n  },\n  \"[object Date]\": date => {\n    return `new Date(${date.getTime()})`;\n  },\n  \"[object String]\": (str, space, next) => {\n    return `new String(${next(str.toString())})`;\n  },\n  \"[object Number]\": num => {\n    return `new Number(${num})`;\n  },\n  \"[object Boolean]\": bool => {\n    return `new Boolean(${bool})`;\n  },\n  \"[object Set]\": (set, space, next) => {\n    return `new Set(${next(Array.from(set))})`;\n  },\n  \"[object Map]\": (map, space, next) => {\n    return `new Map(${next(Array.from(map))})`;\n  },\n  \"[object RegExp]\": String,\n  \"[object global]\": globalToString,\n  \"[object Window]\": globalToString\n};","map":{"version":3,"mappings":"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","names":["objectToString","value","space","next","key","Buffer","isBuffer","toString","global","globalToString","OBJECT_TYPES","Object","prototype","call","undefined","exports","rawObjectToString","obj","indent","eol","values","keys","reduce","fn","result","split","join","function_1","has","push","quote_1","array_1","error","message","date","getTime","str","num","bool","set","Array","from","map","String"],"sources":["/Users/isakgerre/Documents/GitHub/Crypto-Coin-Overview/crypto-app/node_modules/javascript-stringify/src/object.ts"],"sourcesContent":["import { Next, ToString } from \"./types\";\nimport { quoteKey } from \"./quote\";\nimport { USED_METHOD_KEY } from \"./function\";\nimport { arrayToString } from \"./array\";\n\n/**\n * Transform an object into a string.\n */\nexport const objectToString: ToString = (value, space, next, key) => {\n  // Support buffer in all environments.\n  if (typeof Buffer === \"function\" && Buffer.isBuffer(value)) {\n    return `Buffer.from(${next(value.toString(\"base64\"))}, 'base64')`;\n  }\n\n  // Support `global` under test environments that don't print `[object global]`.\n  if (typeof global === \"object\" && value === global) {\n    return globalToString(value, space, next, key);\n  }\n\n  // Use the internal object string to select stringify method.\n  const toString = OBJECT_TYPES[Object.prototype.toString.call(value)];\n  return toString ? toString(value, space, next, key) : undefined;\n};\n\n/**\n * Stringify an object of keys and values.\n */\nconst rawObjectToString: ToString = (obj, indent, next, key) => {\n  const eol = indent ? \"\\n\" : \"\";\n  const space = indent ? \" \" : \"\";\n\n  // Iterate over object keys and concat string together.\n  const values = Object.keys(obj)\n    .reduce(function (values, key) {\n      const fn = obj[key];\n      const result = next(fn, key);\n\n      // Omit `undefined` object entries.\n      if (result === undefined) return values;\n\n      // String format the value data.\n      const value = result.split(\"\\n\").join(`\\n${indent}`);\n\n      // Skip `key` prefix for function parser.\n      if (USED_METHOD_KEY.has(fn)) {\n        values.push(`${indent}${value}`);\n        return values;\n      }\n\n      values.push(`${indent}${quoteKey(key, next)}:${space}${value}`);\n      return values;\n    }, [] as string[])\n    .join(`,${eol}`);\n\n  // Avoid new lines in an empty object.\n  if (values === \"\") return \"{}\";\n\n  return `{${eol}${values}${eol}}`;\n};\n\n/**\n * Stringify global variable access.\n */\nconst globalToString: ToString = (value, space, next) => {\n  return `Function(${next(\"return this\")})()`;\n};\n\n/**\n * Convert JavaScript objects into strings.\n */\nconst OBJECT_TYPES: Record<string, ToString> = {\n  \"[object Array]\": arrayToString,\n  \"[object Object]\": rawObjectToString,\n  \"[object Error]\": (error: Error, space: string, next: Next) => {\n    return `new Error(${next(error.message)})`;\n  },\n  \"[object Date]\": (date: Date) => {\n    return `new Date(${date.getTime()})`;\n  },\n  \"[object String]\": (str: string, space: string, next: Next) => {\n    return `new String(${next(str.toString())})`;\n  },\n  \"[object Number]\": (num: number) => {\n    return `new Number(${num})`;\n  },\n  \"[object Boolean]\": (bool: boolean) => {\n    return `new Boolean(${bool})`;\n  },\n  \"[object Set]\": (set: Set<any>, space: string, next: Next) => {\n    return `new Set(${next(Array.from(set))})`;\n  },\n  \"[object Map]\": (map: Map<any, any>, space: string, next: Next) => {\n    return `new Map(${next(Array.from(map))})`;\n  },\n  \"[object RegExp]\": String,\n  \"[object global]\": globalToString,\n  \"[object Window]\": globalToString,\n};\n"]},"metadata":{},"sourceType":"script"}